// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//introspection -> we crate table in adminer and then in terminal we say 
// npx prisma db pull so we can create models based on the tables inside the database
// so when we have a database in advance we will go for introspection


//migration

model User {
  id Int @id @default(autoincrement())
  email String @unique
  name String @map("firstName")
  role Role? @default(USER)
  profile Profile? // user can have zero or one profile ? means optional
  posts Post[]

  @@map("users")

  @@unique([name, role])

  @@index([id, email])
}
//map attribute can set the name of a feild or a model inside our database
//default attribute we can set a default value for a feild
// if we add a ? after type means this feild can have a null value

model Profile {
  id Int @id @default(autoincrement())
  bio String 
  userId Int @unique
  

  user User @relation(fields: [userId], references: [id])
}

model Post {
  id Int @id @default(autoincrement())
  authorId Int //multiple posts can have the same author id
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean @default(false)
  categories Category[]
  likeNum Int @default(0)
  author User @relation(fields: [authorId], references: [id])
}

model Category {
  id Int @id @default(autoincrement())
  name String
  posts Post[]
}



enum Role {
  USER
  ADMIN
}


//multifeild primiry key we can have a multifeild relationship between them

// model User {
//   firstName String
//   lastName String
//   profile Profile?

//   @@id([firstName, lastName])
// }

// model Profile {
//   id Int @id
//   userFirstName String
//   userLastName String

//   user User @relation(fields: [userFirstName, userLastName], references: [firstName, lastName])
//   @@unique([userFirstName, userLastName])
// }